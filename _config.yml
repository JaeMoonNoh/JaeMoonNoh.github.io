# Site
repository: sproogen/resume-theme
favicon: images/favicon.ico

# Content configuration version
version: 2

# Personal info
name: 노재문
title: 백엔드 개발자
email: nohjaemoon0717@gmail.com
website: jaemoon.tistory.com
# Dark Mode (true/false/never)
darkmode: false

# Social links
#twitter_username: facespics
github_username:  JaeMoonNoh
# stackoverflow_username: "00000001"
# dribbble_username: jekyll
# facebook_username: jekyll
# flickr_username: jekyll
# instagram_username: jameswgrant
# linkedin_username: jameswgrant
# xing_username: jekyll
# pinterest_username: jekyll
# youtube_username: globalmtb
# googleplus_username: +jekyll
# orcid_username: 0000-0000-0000-0000

# Additional icon links
additional_links:
- title: itsgoingto.be
  icon: fas fa-globe
  url: https://www.itsgoingto.be
# - title: another link
#   icon: font awesome brand icon name (eg. fab fa-twitter) (https://fontawesome.com/icons?d=gallery&m=free)
#   url: Link url (eg. https://google.com)

# Google Analytics and Tag Manager
# Using more than one of these may cause issues with reporting
# gtm: "GTM-0000000"
# gtag: "UA-00000000-0"
# google_analytics: "UA-00000000-0"
# 그 결과, 로그 <mark>99.9% 기록</mark>이라는 성과를 통해 서비스 데이터 누락을 방지할 수 있었습니다. <mark>'총대맨 개발자'</mark>이자,
# About Section
# about_title: About Me
about_profile_image: images/landscape-trees.jpg
about_content: | # this will include new lines to allow paragraphs
  8년간 누구도 시도하지 않았던 기술 스택 전환을 직접 주도한 팀의 <mark>'포인트맨'</mark>입니다. 
  <br>레거시 코드베이스에 단순히 적응하는 데 그치지 않고, 팀원 5명을 설득해 모던 기술 스택으로 완전히 전환한 경험이 있습니다. 변화가 필요하다면 누구보다 먼저 움직이고, 팀이 믿고 따라올 수 있는 방향을 제시하는 개발자입니다.
  <br>
  <br>현재는 API 최적화와 구조 개선에 깊은 관심을 가지고 있습니다. 개인 프로젝트에서 얻은 인사이트를 실무에 적극적으로 적용해 <mark>Redis</mark>와 <mark>BullMQ</mark>를 바탕으로 장애 상황에서도 무손실 데이터 처리를 실현했습니다. 이처럼 예측 불가능한 장애나 트래픽 폭주 상황을 가정해 구조를 개선함으로써, 서비스의 본질적 가치를 지키는 데 집중하고 있습니다.
  <br>
  <br><mark>"모든 문제에 Silver Bullet, 즉 만능 해결책은 없지만, 반드시 해답은 존재한다”</mark>는 신념을 갖고 있습니다. 특정 기술이나 방식에 집착하지 않고, 상황과 문제의 본질에 맞는 최적의 도구와 방법을 적극적으로 탐색하고 적용합니다. 불이 필요하면 부싯돌을, 물이 필요하면 우물을 파듯, 문제마다 가장 효과적인 해법을 찾는 데 집중할 것 입니다.

content:
  - title: Experience # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Codeline
        link: http://codeline.kr/
        # link_text: boringcompany.com
        sub_title: 백엔드 개발자 | 팀장
        caption: 09.2022 - Present
        description: | # this will include new lines to allow paragraphs
          - TypeScript, Nest, Node.js, Express, Inversify를 활용한 백엔드 개발
          - RESTful API 설계 및 구현
          - DB 테이블 인덱스 설계
          - Redis Cache 전략으로 API 응답 속도 **최대 84% 개선**
          - BullMQ를 이용한 비동기 작업 처리 및 [**로그 저장 큐 시스템 구현**](https://jaemoon.tistory.com/364)
          - [**팀 리딩** 및 프로젝트 관리](https://jaemoon.tistory.com/316)

  - title: Projects # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: 충남도청 시스템
        caption: 2024.12 ~ 2025.05
        sub_title: 백엔드 리팩토링 주도 및 아키텍처 설계 | 팀장(개발자 5인 리드)
        link: https://jaemoon.tistory.com/316
        description: |

          - Nest 마이그레이션 진행중
          - Inversify DI/IoC 도입으로 의존성 제거, 유지보수성과 기능 개발 속도 **70% 개선**
          - Redis + BullMQ 기반 로그 큐 시스템 구축, 장애 상황에서도 **99.9% 로그 영속성 보장**
          - RESTful API 전면 재설계 일관성과 확장성 확보
          - **사내 세미나 24회** 주관 및 코드 리뷰 프로세스 도입으로 **조직 역량 강화**
          - [BullMQ 기반 로그 큐 시스템 도입기](https://jaemoon.tistory.com/364)

      - layout: left
        title: 아이나래 시스템 고도화
        caption: 2024.06 ~ 2024.12
        sub_title: 백엔드 리팩토링 주도 및 고도화
        link: https://www.khan.co.kr/article/202407011100011
        description: |

          - TypeScript 마이그레이션
          - 한 파일당 10,000+ 라인 모놀리식 API를 **15개 모듈**로 분리
          - Redis TTL 캐시 전략 도입, 조회 API 응답 속도 **84% 개선**
          - DB-Cache 일관성 정책 수립, 데이터 정합성 및 신뢰성 확보

  - title: Personal Projects # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: MSA 설계 학습 프로젝트
        caption: 2025.05 ~ 2025.05
        sub_title: MSA 학습
        link: https://github.com/JaeMoonNoh/reward-event
        description: |

          - 트래픽 분산 및 장애 격리위해 **MSA 아키텍처 설계**와 기능별 **서비스 간 결합도 전략적으로 조절**
          - 이벤트 도메인에 **메시지 큐(Bull/Redis Queue) 기반의 비동기 메시징 구조**를 적용
          - Redis를 메시지 브로커 및 작업 큐로 활용, 도메인 간 **비동기 이벤트 처리** 체계 확립
          - **5일이내** 빠른 개발

      - layout: left
        title: Like 성능 최적화
        caption: 2025.03 ~ 2025.05
        sub_title: 백엔드 성능 병목 분석 및 아키텍처 개선
        link: https://github.com/f-lab-edu/factualpost
        description: |

          - **RPS 700** 환경에서 응답 시간 **580ms → 25ms(96%)**, **P95 988ms → 88ms(91%)** 개선
          - Like 요청 집중 시 발생한 **MySQL Lock 경합 해소** 및 **DB 연결 고갈 해결**
          - BullMQ 기반 **비동기 Queue 도입**으로 Like 요청 처리 **병목 해소**
          - [BullMQ 도입기](https://jaemoon.tistory.com/363)

  - title: Skill # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        title: Backend
        # link: http://codeline.kr/
        # link_text: boringcompany.com
        # sub_title: 백엔드 개발자 | 팀장
        # caption: 09.2022 - Present
        #quote: >
          # 상담 양식을 통해 들어온 고객의 문의를 처리하는 시스템을 개발하고 있습니다.
        description: | # this will include new lines to allow paragraphs
          - Node.js, Express, NestJS, TypeScript
          - TypeORM, MySQL
          - Redis(BullMQ, Pub/Sub, Cache, Pipeline)
          - Testing(k6, Jest)
      - layout: left
        title: Frontend
        # link: http://codeline.kr/
        # link_text: boringcompany.com
        # sub_title: 백엔드 개발자 | 팀장
        # caption: 09.2022 - Present
        #quote: >
          # 상담 양식을 통해 들어온 고객의 문의를 처리하는 시스템을 개발하고 있습니다.
        description: | # this will include new lines to allow paragraphs
          - jQuery, HTML, CSS

  - title: Detail
    layout: list
    content:

      - layout: left
        title: 신뢰성 중심 로그 수집 아키텍처 구현
        caption: 2025.05
        sub_title: BullMQ 기반 고신뢰 로그 수집 시스템 설계 및 운영
        description: |
          실시간 트래픽 증가나 장애 상황에서도 **사실상 로그 유실 없는 수준의 고신뢰 수집 시스템**을 구현했습니다. BullMQ 기반 비동기 구조를 통해 단순한 비동기 처리를 넘어서 Redis 장애 복구까지 고려한 구조를 직접 설계하고, 구조적 리스크를 사전에 제어할 수 있는 운영 수준의 시스템을 구축했습니다.

          기존 구조는 보안 로그를 API 서버에서 직접 DB에 저장하는 방식이었으며, 트래픽 급증 시 다음과 같은 병목이 발생했습니다:

          - DB Connection Pool 고갈
          - DML Lock 경합
          - SPOF 구조로 인한 장애 전파
          - 로그 유실 발생 가능성

          특히 로그는 보안 사고의 핵심 단서로 활용되기 때문에, 유실은 성능 문제가 아니라 **서비스 신뢰성과 복원력의 문제**였습니다.

          개선된 구조는 다음과 같습니다:

          - BullMQ 기반 Message Queue 아키텍처 도입
          - API 서버 → Redis에 로그 적재 → Worker가 순차 저장
          - 고부하 상황에서도 **사실상 로그 유실 없는 수준의 안정성 확보**
          - DB와의 강결합 해소로 응답 지연 및 장애 전파 제거

          Redis 운용에 있어 고가용성과 복원력을 위한 조치도 포함했습니다:

          - TTL, AOF 설정, Eviction Policy 최적화를 통한 **OOM 방지 및 데이터 영속성 확보**
          - 장애 발생 시에도 로그 복원 가능한 구조
          - Redis Sentinel 및 Cluster 구성까지 고려해 **HA(High Availability) 기반의 운영 안정성 확보**

          실제 운영 환경에서도 Redis 일시 장애나 예상치 못한 부하 상황을 견디며, **신뢰성 높은 로그 수집이 완전하게 이뤄짐을 검증**했습니다. 단순한 도구 사용이 아닌 Redis 제약을 구조적으로 해석하고 대응한 실전 경험이며, 보안 로그 유실이라는 리스크를 **아키텍처 수준에서 제거**한 사례입니다.

          ━━━━━━━━━━━━━━━━━━━━━━━━

      - layout: left
        title: 비동기 아키텍처 전환
        caption: 2025.05
        sub_title: BullMQ 기반 큐 시스템 도입 및 MySQL Connection 병목 해소
        description: |
          BullMQ 기반 비동기 아키텍처로 전환해 평균 응답속도를 **580ms → 25ms (▲96%)**까지 개선하고, **TPS 700 이상** 환경에서도 **Connection 고갈 없이 안정화**된 서비스를 구현했습니다.

          기존 동기 구조는 사용자 요청마다 DB에 직접 접근해 좋아요 상태를 처리했으며, 이로 인해 TPS 700 이상의 부하에서는 row-level lock 경합 및 Connection Pool 고갈 문제가 반복적으로 발생했습니다. 단순히 connection 수를 증가시키는 방식은 Context Switching 비용만 증가시켜 본질적인 해결책이 될 수 없었습니다.

          구조적 개선 과정:
          - Redis INCR/DECR → Bulk insert로 Write 집중 해소
          - KEYS → SET 자료구조 및 Pipeline 도입
          - MySQL Full Scan → Index Scan 전환 (응답 시간 **42ms**까지 단축)

          최종 전환 아키텍처:
          - Redis + BullMQ 기반 큐 구조
          - Node.js Worker로 DB 접근 제어 및 Lock 해소
          - Retry, Backoff 적용으로 장애 상황 재처리 보장
          - CAP 이론 기반 Eventual Consistency 채택

          단순 튜닝을 넘은 구조적 접근으로 시스템 병목을 해결하고, 설계적 시야로 문제를 해결한 경험이었습니다.\

          ━━━━━━━━━━━━━━━━━━━━━━━━

      - layout: left
        title: InnoDB 성능 최적화 및 구조 개선
        caption: 2025.05
        sub_title: 1억 건 데이터 대상의 INSERT/SELECT 병목 해소 및 인덱스 구조 재설계
        description: |
          InnoDB의 내부 메커니즘을 깊이 이해하고, 이를 기반으로 테이블과 인덱스를 재설계함으로써 **1억 건 이상의 데이터 처리 환경에서도 안정적인 성능**을 확보했습니다.

          실제 운영 환경에서 다음과 같은 병목 현상이 동시에 발생했습니다:

          - INSERT 작업 중 Timeout, Change Buffer 미작동
          - 페이지네이션 SELECT 시 지연 및 처리 불균형
          - Purge Thread 병목 → Undo Log 폭증
          - Buffer Pool 적중률 저하 → 디스크 I/O 증가

          **구조적 개선 방향**

          **Secondary Index 최소화**
              - INSERT 시 모든 인덱스에 Redo/Undo Log 기록이 발생
              - 사용되지 않는 보조 인덱스를 제거해 I/O 및 Purge 부담 완화

          **FK 제거 → Change Buffer 활성화**
              - FK가 존재하면 보조 인덱스 변경 시 Change Buffer 미작동
              - 디스크 쓰기 증가 및 Purge Thread 병목
              - FK 제거 후 애플리케이션 레벨에서 무결성 관리로 전환

          **반정규화 전략**
              - JOIN을 대체해 조회 성능 개선
              - 변경 빈도 낮은 컬럼은 테이블 내 중복 허용
              - 값 변경 발생 시 Bulk Update 처리 전략 적용

          **Covering Index 도입**
              - Double Lookup 제거: Secondary Index → PK 탐색 제거
              - 자주 조회되는 컬럼 조합 기반의 Index 설계
              - Buffer Pool 적중률 향상 및 Disk I/O 감소

          **개선 효과 및 인사이트**

          - Change Buffer가 다시 활성화되며 디스크 쓰기 병목 제거
          - Purge Thread 지연 해소 및 Undo Log 안정화
          - Insert/Select 작업 모두에서 성능 개선 확인
          - 단순한 튜닝을 넘어서, InnoDB의 Redo/Undo/Change Buffer, FK 무결성 검사, Buffer Pool 메커니즘까지 고려한 **아키텍처적 개선 경험**

          이 경험을 통해 **성능 문제는 단일 포인트가 아닌 InnoDB 내부 구조의 상호작용**에 의해 발생한다는 점을 체감했습니다. 따라서 고성능을 위한 설계는 단일 요소 튜닝이 아닌, **전체 구조와 메커니즘을 통합적으로 고려하는 설계 전략**이 필수적임을 학습했습니다.


      

# - title: Education # Title for the section
  #   layout: list # Type of content section (list/text)
  #   content:
  #     - layout: left
  #       title: f-lab
  #       caption: 2024.11 - 2025.04
  #       sub_title: Node.js 백엔드 개발
  #       quote: >
  #         팀 리드하기 위해 더욱 많은 학습을 하기 위해 참여한 f-lab의 Node.js 백엔드 개발 과정입니다.
  #       description: | # this will include new lines to allow paragraphs
  #         - Node.js, Express, NestJS, TypeScript를 활용한 백엔드 개발
  #         - RESTful API 설계 및 구현
  #         - 성능 최적화
  #         - 비동기 프로그래밍 및 이벤트 기반 아키텍처 이해

# Footer
footer_show_references: true
# references_title: References on request (Override references text)

# Build settings
remote_theme: sproogen/resume-theme

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-seo-tag
